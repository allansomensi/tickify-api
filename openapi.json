{
    "openapi": "3.1.0",
    "info": {
        "title": "Tickify API",
        "description": "A simple REST API using Axum for support ticket management.",
        "contact": {
            "name": "Allan Somensi",
            "email": "allansomensidev@gmail.com"
        },
        "license": {
            "name": "MIT",
            "identifier": "MIT"
        },
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Local server"
        }
    ],
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Returns a JTW.",
                "description": "If the credentials are correct, a JWT is returned.",
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Logged in successfully."
                    },
                    "401": {
                        "description": "Incorrect password, unauthorized."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user.",
                "description": "This endpoint register a new user in the database with the provided details.",
                "operationId": "register",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long."
                    },
                    "409": {
                        "description": "Conflict: User with the same name already exists."
                    },
                    "500": {
                        "description": "An error occurred while creating the user."
                    }
                }
            }
        },
        "/api/v1/auth/verify": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Verify JWT.",
                "description": "Verifies if a JWT is still valid.",
                "operationId": "verify",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyTokenPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Token is valid!"
                    }
                }
            }
        },
        "/api/v1/export/csv/ticket/{id}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Generates a ticket in CSV.",
                "description": "Generates a CSV with the ticket information by its ID.",
                "operationId": "ticket_to_csv",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the ticket.",
                        "required": true,
                        "example": "c3a193ef-746a-4af1-953f-6081e6a42d9e"
                    }
                ],
                "responses": {},
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/export/pdf/ticket/{id}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Generates a ticket in PDF.",
                "description": "Generates a PDF with the ticket information by its ID.",
                "operationId": "ticket_to_pdf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the ticket.",
                        "required": true,
                        "example": "8cc053f7-12d9-4a84-a913-8ae9b799395c"
                    }
                ],
                "responses": {},
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/migrations": {
            "post": {
                "tags": [
                    "Migrations"
                ],
                "summary": "Execute pending database migrations.",
                "description": "This endpoint executes any pending migrations in the database. It applies migrations that have not yet been run and provides confirmation upon success.",
                "operationId": "live_run",
                "responses": {
                    "200": {
                        "description": "Migrations applied successfully",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while applying migrations"
                    }
                }
            }
        },
        "/api/v1/status": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get API and database status",
                "description": "Fetches the current operational status of the API, including database information such as version, max connections, and active connections.",
                "operationId": "show_status",
                "responses": {
                    "200": {
                        "description": "Status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tickets": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "List all tickets.",
                "description": "Fetches all tickets stored in the database. If there are no tickets, returns an empty array.",
                "operationId": "find_all_tickets",
                "responses": {
                    "200": {
                        "description": "Tickets retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Ticket"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No tickets found in the database."
                    },
                    "500": {
                        "description": "An error occurred while retrieving the tickets."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Update an existing ticket.",
                "description": "This endpoint updates the details of an existing ticket in the database.",
                "operationId": "update_ticket",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTicketPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ticket updated successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long."
                    },
                    "404": {
                        "description": "Ticket ID not found."
                    },
                    "409": {
                        "description": "Conflict: Ticket with the same name already exists."
                    },
                    "500": {
                        "description": "An error occurred while updating the ticket."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Create a new ticket.",
                "description": "This endpoint creates a new ticket in the database with the provided details.",
                "operationId": "create_ticket",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTicketPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Ticket created successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long."
                    },
                    "409": {
                        "description": "Conflict: Ticket with the same name already exists."
                    },
                    "500": {
                        "description": "An error occurred while creating the ticket."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Delete an existing ticket.",
                "description": "This endpoint deletes a specific ticket from the database using its ID.",
                "operationId": "delete_ticket",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeletePayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ticket deleted successfully"
                    },
                    "404": {
                        "description": "Ticket ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the ticket"
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/tickets/count": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Get the total count of tickets.",
                "description": "This endpoint retrieves the total number of tickets stored in the database.",
                "operationId": "count_tickets",
                "responses": {
                    "200": {
                        "description": "Ticket count retrieved successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the ticket count."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/tickets/{id}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Get a specific ticket by ID.",
                "description": "This endpoint retrieves a ticket's details from the database using its ID. Returns the ticket if found, or a 404 status if not found.",
                "operationId": "find_ticket_by_id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the ticket to retrieve.",
                        "required": true,
                        "example": "68dfbe3f-e9a2-474b-82ac-514e27d03ba6"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ticket"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No ticket found with the specified ID."
                    },
                    "500": {
                        "description": "An error occurred while retrieving the ticket."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List all users.",
                "description": "Fetches all users stored in the database. If there are no users, returns an empty array.",
                "operationId": "find_all_users",
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No users found in the database."
                    },
                    "500": {
                        "description": "An error occurred while retrieving the users."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user.",
                "description": "This endpoint updates the details of an existing user in the database.",
                "operationId": "update_user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long."
                    },
                    "404": {
                        "description": "User ID not found."
                    },
                    "409": {
                        "description": "Conflict: User with the same name already exists."
                    },
                    "500": {
                        "description": "An error occurred while updating the user."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user.",
                "description": "This endpoint creates a new user in the database with the provided details.",
                "operationId": "create_user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "User created successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, including empty name or name too short/long."
                    },
                    "409": {
                        "description": "Conflict: User with the same name already exists."
                    },
                    "500": {
                        "description": "An error occurred while creating the user."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete an existing user.",
                "description": "This endpoint deletes a specific user from the database using its ID.",
                "operationId": "delete_user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeletePayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "404": {
                        "description": "User ID not found"
                    },
                    "500": {
                        "description": "An error occurred while deleting the user"
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/users/count": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get the total count of users.",
                "description": "This endpoint retrieves the total number of users stored in the database.",
                "operationId": "count_users",
                "responses": {
                    "200": {
                        "description": "User count retrieved successfully.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred while retrieving the user count."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a specific user by ID.",
                "description": "This endpoint retrieves a user's details from the database using its ID. Returns the user if found, or a 404 status if not found.",
                "operationId": "find_user_by_id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique identifier of the user to retrieve.",
                        "required": true,
                        "example": "c25c3824-4201-46a6-b92c-118ebfc67190"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No user found with the specified ID."
                    },
                    "500": {
                        "description": "An error occurred while retrieving the user."
                    }
                },
                "security": [
                    {},
                    {
                        "jwt_token": [
                            "jwt_token"
                        ]
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "CreateTicketPayload": {
                "type": "object",
                "required": [
                    "title",
                    "description",
                    "requester"
                ],
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "requester": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    }
                }
            },
            "CreateUserPayload": {
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "first_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "last_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "password": {
                        "type": "string"
                    },
                    "role": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Role"
                            }
                        ]
                    },
                    "username": {
                        "type": "string"
                    }
                }
            },
            "Database": {
                "type": "object",
                "required": [
                    "version",
                    "max_connections",
                    "opened_connections"
                ],
                "properties": {
                    "max_connections": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "opened_connections": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "version": {
                        "$ref": "#/components/schemas/String"
                    }
                }
            },
            "DeletePayload": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "Dependencies": {
                "type": "object",
                "required": [
                    "database"
                ],
                "properties": {
                    "database": {
                        "$ref": "#/components/schemas/Database"
                    }
                }
            },
            "LoginPayload": {
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                }
            },
            "Role": {
                "type": "string",
                "enum": [
                    "User",
                    "Moderator",
                    "Admin"
                ]
            },
            "Status": {
                "type": "object",
                "required": [
                    "updated_at",
                    "dependencies"
                ],
                "properties": {
                    "dependencies": {
                        "$ref": "#/components/schemas/Dependencies"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "String": {
                "type": "string"
            },
            "Ticket": {
                "type": "object",
                "required": [
                    "id",
                    "title",
                    "description",
                    "requester",
                    "status",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "closed_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "closed_by": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "requester": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "solution": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "status": {
                        "$ref": "#/components/schemas/TicketStatus"
                    },
                    "title": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "TicketStatus": {
                "type": "string",
                "enum": [
                    "Open",
                    "InProgress",
                    "Closed",
                    "Reopened",
                    "Paused",
                    "Cancelled"
                ]
            },
            "UpdateTicketPayload": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "closed_by": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "requester": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "solution": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "status": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/TicketStatus"
                            }
                        ]
                    },
                    "title": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "UpdateUserPayload": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "email": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "first_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "last_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "role": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Role"
                            }
                        ]
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "User": {
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "password_hash",
                    "role",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "email": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "first_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "last_name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "password_hash": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "username": {
                        "type": "string"
                    }
                }
            },
            "VerifyTokenPayload": {
                "type": "object",
                "required": [
                    "token"
                ],
                "properties": {
                    "token": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "jwt_token": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Status",
            "description": "Status endpoints"
        },
        {
            "name": "Migrations",
            "description": "Migrations endpoints"
        },
        {
            "name": "Auth",
            "description": "Auth endpoints"
        },
        {
            "name": "Users",
            "description": "Users endpoints"
        },
        {
            "name": "Tickets",
            "description": "Tickets endpoints"
        }
    ]
}